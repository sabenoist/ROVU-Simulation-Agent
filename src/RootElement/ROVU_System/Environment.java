// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement.ROVU_System;

import java.awt.Color;

import javax.vecmath.Color3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;

import simbad.sim.Arch;
import simbad.sim.Box;
import simbad.sim.EnvironmentDescription;
import simbad.sim.Wall;

/************************************************************/
/**
 * 
 */
public class Environment extends EnvironmentDescription {

	private int[] totalAreaSize;
	private Coordinate[][] gridPoints;
	private Zone[] zones;

	public Environment(int areaLength, int areaWidth) {
		totalAreaSize = new int[2];
		totalAreaSize[0] = areaLength;
		totalAreaSize[1] = areaWidth;
		zones = new Zone[4];
		gridPoints = new Coordinate[areaLength][areaWidth];

		this.light1IsOn = true;
		this.light2IsOn = true;
		this.setUsePhysics(true);
		this.showAxis(true);
		this.setWorldSize(areaLength); // rectangles?
		
	}

	public Zone getZone(int id) {
		if (id < zones.length) {
			return zones[id];
		}
		System.out.printf("Zone ID %d does not exist.\n", id);
		return null;
	}

	public void addBox(double d, double e) {
		Box box = new Box(new Vector3d(d, 0, e), new Vector3f(1, 1, 1), this);
		box.setColor(new Color3f(Color.RED));
		add(box);
	}

	public void addWall(int x, int z, boolean rotate) {
		Wall wall = new Wall(new Vector3d(x, 0, z), 10, 2, this); // 10 2 = length height
		wall.setColor(new Color3f(Color.BLUE));
		if( rotate ) wall.rotate90(1);
		add(wall);
	}

	public void setGrid(Coordinate[][] grid) {
		if (gridPoints.length != grid.length || gridPoints[0].length != grid[0].length) {
			System.out.printf("setGrid(): incompatible grid sizes");
			return;
		}
		gridPoints = grid;
	}

	public void setZone(Zone z, int id) {
		if (id < zones.length) {
			zones[id] = z;
		} else {
			System.out.printf("setZone(): zone %d out of bounds\n", id);
		}
	}
	
	public Coordinate[][] getGrid(){
		return gridPoints;
	}
	
	public int[] getAreaSize(){
		return totalAreaSize;
	}
	
	public void printGrid(Coordinate[][] grid){
		System.out.printf("Printing grid (size:%dx%d)\n", grid.length, grid[0].length);
		for(int i = 0; i < grid.length; i++){
			for(int j = 0; j < grid[0].length; j++){
				System.out.printf("(%.1f, %.1f) ", grid[i][j].getX(), grid[i][j].getZ());
			}
			System.out.printf("\n");
		}
		System.out.printf("\n");
	}
	public void utilBoxGrid(Coordinate[][] grid){
		boolean color = false;
		for(int i = 0; i < grid.length; i++){
			for(int j = 0; j < grid[0].length; j++){
				Box box = new Box(new Vector3d(grid[i][j].getX(), 0,  grid[i][j].getZ()), new Vector3f(1, 1, 1), this);
				if(color)
					box.setColor(new Color3f(Color.ORANGE));
				else
					box.setColor(new Color3f(Color.BLUE));	
				add(box);
				color = !color;
			}
		}
	}
	
	public void utilBoxZone(Coordinate[][] grid, Color c){
		for(int i = 0; i < grid.length; i++){
			for(int j = 0; j < grid[0].length; j++){
				Box box = new Box(new Vector3d(grid[i][j].getX(), 0,  grid[i][j].getZ()), new Vector3f(1, 1, 1), this);
				box.setColor(new Color3f(c));
				add(box);
			}
		}
	}
	
};
