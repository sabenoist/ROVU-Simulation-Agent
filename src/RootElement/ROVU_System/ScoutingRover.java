// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement.ROVU_System;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import RootElement.ROVU_System.Rover;

/************************************************************/
/**
 * 
 */
public class ScoutingRover extends Rover {

	private int proximity;

	public ScoutingRover(Vector3d position, String name, Subject s, int initdir) {
		super(position, name);
		// possible data loss from double -> int conversion...
		this.setInitialPosition(new Coordinate((int)position.x, (int)position.y, (int)position.z));
		this.setRoverName(name);
		this.setSubject(s);
		this.getSubject().attach(this);
		this.setInitialDirection(initdir);
		this.setType(RoverEnum.SCOUTING_ROVER);
	}

	public int getProximity(){
		return proximity;
	}
	public void setProximity(int p){
		proximity = p;
	}
	
	public void genRandomDirection(int direction) {
	}

	public void startScouting() {
	}

	/** This method is called by the simulator engine on reset. */
    public void initBehavior() {
        System.out.printf("I exist and my name is %s\n", this.getName());
    }

    /** This method is call cyclically (20 times per second) by the simulator engine. */
    public void performBehavior() {
    	
    	if( this.getCounter() % 59 == 0 )
    	{
            Point3d loc = new Point3d();
            this.getCoords(loc);
            System.out.printf("%s[%d]: [X(%.1f) Y(%.1f) Z(%.1f)]\n", this.getName(), this.getFramesPerSecond(), loc.getX(), loc.getY(), loc.getZ());
    	}
 
    	// perform the following actions every 5 virtual seconds
    	if(this.getCounter() % 5 == 0) {
    	           
	    	if(this.collisionDetected()) {
	    		this.setStatus("avoiObstacle");
	    	} else {
	    		this.setStatus("goAround");
	    	}
	        
	    	if(this.getStatus() == "goAround") {
	    		// the robot's speed is always 0.5 m/s
	            this.setTranslationalVelocity(0.5);
	            
	    		// frequently change orientation
	            if ((getCounter() % 100) == 0) {
	                setRotationalVelocity(Math.PI / 2 * (0.5 - Math.random()));
	            }    
	        } else {
	        	// don't move
	        	this.setTranslationalVelocity(0);
	        	// rotate only until obstacle is not there
	        	setRotationalVelocity(Math.PI / 2);
	        }
    	}
    	
    }


	@Override
	public void update() {
		System.out.printf("i updated lol\n");
		
	}
};
