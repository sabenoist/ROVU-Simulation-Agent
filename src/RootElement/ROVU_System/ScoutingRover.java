// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement.ROVU_System;

import java.util.Random;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import RootElement.ROVU_System.Rover;
import simbad.sim.RangeSensorBelt;
import simbad.sim.RobotFactory;

/************************************************************/
/**
 * 
 */
public class ScoutingRover extends Rover {

	private int proximity;
	boolean running = true;
	int proxcheck;
	int currentDirection;
	
	RangeSensorBelt sonar;	
	//	camera rover stuff
	Coordinate[][] zoneGrid;
	int grid_i = 1;
	int grid_j = 0;
	
	public ScoutingRover(Vector3d position, String name, Subject s, int initdir) {
		super(position, name);
		this.setInitialPosition(new Coordinate(position.x, position.y, position.z));
		this.setRoverName(name);
		this.setSubject(s);
		this.getSubject().attach(this);
		this.setInitialDirection(initdir);
		this.setType(RoverEnum.SCOUTING_ROVER);
		sonar = RobotFactory.addSonarBeltSensor(this, 4);
	}

	/*public int getProximity(){
		return proximity;
	}*/
	public void setProximity(int p){
		proximity = p;
	}
	
	public void genRandomDirection(int direction) {
	}

	public void startScouting() {
	}

	/** This method is called by the simulator engine on reset. */
    public void initBehavior() {
        System.out.printf("I exist and my name is %s\n", this.getName());
        
        switch(this.getInitialDirection()) {
        	case 0: rotateY(-Math.PI); currentDirection = 0; break; // north
        	case 2: currentDirection = 2; break; // south (default)
        	default: break;
        }   
       // camera rover stuff
        zoneGrid = this.getZone().getZoneGrid();
    }

    boolean enableRotate = false;
    
    /** This method is call cyclically (20 times per second) by the simulator engine. */
    public void performBehavior() {
    	
    	if(!running){
			return;
		}
    	
    	//System.out.printf("Min:(%.1f,%.1f) Max:(%.1f,%.1f)\n", zoneGrid[0][0].getX(),zoneGrid[0][0].getZ(), zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getX(), zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getZ());
    	if( this.getCounter() > proxcheck )
    	{
    	Point3d cur = new Point3d();
        this.getCoords(cur);
        //System.out.printf("The current direction is: %d\n", currentDirection);
        switch(currentDirection){
        case 0:{ // north
        	// probably use absolute value for all rover compatibility
        	if(Math.abs(cur.getX()) > Math.abs(zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getX()))
        	{
        		System.out.printf("%f <= %f (north)\n", cur.getX(), zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getX());
        		this.setTranslationalVelocity(0);
        		rotateY(-(Math.PI / 2));
        		System.out.printf("CurrentDirection: %d ->", currentDirection);
                currentDirection = (currentDirection + 1) % 4;
                System.out.printf(" %d\n", currentDirection);
                proxcheck = this.getCounter() + 10;
                return;
        	}
        	break;
        }
        case 1:{ // east
        	if(Math.abs(cur.getZ()) < Math.abs(zoneGrid[0][0].getZ()))
        	{
        		System.out.printf("%f >= %f (east)\n", cur.getZ(), zoneGrid[0][0].getZ());
        		this.setTranslationalVelocity(0);
        		rotateY(-(Math.PI / 2));
        		System.out.printf("CurrentDirection: %d ->", currentDirection);
                currentDirection = (currentDirection + 1) % 4;
                System.out.printf(" %d\n", currentDirection);
                proxcheck = this.getCounter() + 10;
                return;
        	}
        	break;
        }
        case 2:{ // south
        	if(Math.abs(cur.getX()) < Math.abs(zoneGrid[0][0].getX()))
        	{
        		System.out.printf("%f >= %f (south)\n", cur.getX(), zoneGrid[0][0].getX());
        		this.setTranslationalVelocity(0);
        		rotateY(-(Math.PI / 2));
        		System.out.printf("CurrentDirection: %d ->", currentDirection);
                currentDirection = (currentDirection + 1) % 4;
                System.out.printf(" %d\n", currentDirection);
                proxcheck = this.getCounter() + 10;
                return;
        	}
        	break;
        }
        case 3:{ // west
        	if(Math.abs(cur.getZ()) > Math.abs(zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getZ()))
        	{
        		System.out.printf("%f <= %f (west)\n", cur.getZ(), zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getZ());
        		this.setTranslationalVelocity(0);
        		rotateY(-(Math.PI / 2));
        		System.out.printf("CurrentDirection: %d ->", currentDirection);
                currentDirection = (currentDirection + 1) % 4;
                System.out.printf(" %d\n", currentDirection);
                proxcheck = this.getCounter() + 10;
                return;
        	}
        	break;
        }
        }
    	}
    	
    	if( enableRotate && this.getCounter() > 0 && this.getCounter() % 40 == 0 ) // every 1 meter with 0.5ms
    	{
    		Random rand = new Random();
        	int randomValue = rand.nextInt(3); // 0-3: left/right/straight
        	switch(randomValue){
        		case 0: rotateY(-(Math.PI / 2)); break;
        		case 1: rotateY(Math.PI / 2); break;
        		default: break;
        	}
        	System.out.printf("changed direction\n");
            Point3d loc = new Point3d();
            this.getCoords(loc);
            System.out.printf("%s[%d]: [X(%.1f) Y(%.1f) Z(%.1f)]\n", this.getName(), this.getFramesPerSecond(), loc.getX(), loc.getY(), loc.getZ());
    	}
    	
    	if( this.getCounter() > proxcheck && sonar.getMeasurement(0) <= 0.2 ){
			Point3d loc = new Point3d();
            this.getCoords(loc);
            System.out.printf("Obj Detected from: [X(%.1f) Y(%.1f) Z(%.1f)]\n", loc.getX(), loc.getY(), loc.getZ());
            // do something to store the fact
            double x = loc.getX();
            double y = loc.getY();
            double z = loc.getZ();
            switch(currentDirection){
            	case 0: x-=1; break;
            	case 1: z-=1; break;
            	case 2: x+=1; break;
            	case 3: z+=1; break;
            }
            System.out.printf("Object at: [X(%.1f) Y(%.1f) Z(%.1f)]\n", x, y, z);
            this.setTranslationalVelocity(0);
            rotateY(-(Math.PI / 2));
            currentDirection = (currentDirection + 1) % 4;
            // do not instantly check again otherwise itll turn twice
            proxcheck = this.getCounter() + 10;
            
            return;
		}
    	
    	// perform the following actions every 5 virtual seconds
    	if(this.getCounter() % 5 == 0) {
    		
    		/* camera rover stuff
    		Point3d loc = new Point3d();
            this.getCoords(loc);
            System.out.printf("Looking for x: %f\n", zoneGrid[grid_i][grid_j].getX());
            if(loc.getX() <= zoneGrid[grid_i][grid_j].getX())
            {
            	System.out.printf("Caught at: %f\n", loc.getX());
    			this.setTranslationalVelocity(0);
    			grid_i++;
    			running = false;
    			count = this.getCounter() + 100;
            	return;
            }
            */
    		
    		//System.out.printf("Proximity: %f\n", sonar.getMeasurement(0));
    		
	    	if(this.collisionDetected()) {
	    		this.setStatus("avoidObstacle");
	    	} else {
	    		this.setStatus("forward");
	    	}
	        
	    	
	    	if(this.getStatus() == "forward") {
	    		// the robot's speed is always 0.5 m/s
	            this.setTranslationalVelocity(0.5);  
	        } else {
	        	// collision detected -> do sth
	        	Point3d loc = new Point3d();
	            this.getCoords(loc);
	            System.out.printf("CollDet: [X(%.1f) Y(%.1f) Z(%.1f)]\n", loc.getX(), loc.getY(), loc.getZ());
	        }
    	}
    	
    }


	@Override
	public void update() {
		System.out.printf("i updated lol\n");
		
	}
};
