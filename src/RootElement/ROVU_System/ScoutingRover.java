// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement.ROVU_System;

import java.util.Random;

import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import RootElement.ROVU_System.Rover;
import simbad.sim.RangeSensorBelt;
import simbad.sim.RobotFactory;

/************************************************************/
/**
 * 
 */
public class ScoutingRover extends Rover {

	private int proximity;
	boolean running = true;
	int proxcheck = 0;
	int zonecheck = 0;
	int currentDirection;
	RangeSensorBelt sonar;
	int turnAgain = 0;
	
	//	camera rover stuff
	Coordinate[][] zoneGrid;
	int grid_i = 1;
	int grid_j = 0;
	
	// gps req
	Coordinate currentPosition;
	
	public ScoutingRover(Vector3d position, String name, Subject s, int initdir) {
		super(position, name);
		this.setInitialPosition(new Coordinate(position.x, position.y, position.z));
		this.setRoverName(name);
		this.setSubject(s);
		this.getSubject().attach(this);
		this.setInitialDirection(initdir);
		this.setType(RoverEnum.SCOUTING_ROVER);
		sonar = RobotFactory.addSonarBeltSensor(this, 4);
		// gps req 
		currentPosition = new Coordinate(position.x, 0.3, position.z);
	}
	/*public int getProximity(){
		return proximity;
	}*/
	public void setProximity(int p){
		proximity = p;
	}
	
	public void genRandomDirection(int direction) {
	}

	public void startScouting() {
	}

	/** This method is called by the simulator engine on reset. */
    public void initBehavior() {
        System.out.printf("I exist and my name is %s\n", this.getName());
        switch(this.getInitialDirection()) {
        	case 0: rotateY(-Math.PI); currentDirection = 0; break; // north
        	case 2: currentDirection = 2; break; // south (default)
        	default: break;
        }   
       // camera rover stuff
        zoneGrid = this.getZone().getZoneGrid();
        zonecheck = 0;
        proxcheck = 0;        
    }

    boolean enableRotate = false;
    
    /** This method is call cyclically (20 times per second) by the simulator engine. */
    public void performBehavior() {
    	
    	if(!running){
			return;
		}
    	
    	if(this.getCounter() > 240){
    		CentralStation cs = (CentralStation)this.getSubject();
    		cs.finishScouting();
    		this.setTranslationalVelocity(0);
    		this.setStatus("stopped");
    		running = false;
    		
    		int zoneSize = this.getZone().getZoneGrid().length;
    		switch(this.getZone().getID() % 4){
    			case 0: this.moveToPosition(new Vector3d(-zoneSize-2, 0, -zoneSize-2));
    			case 1: this.moveToPosition(new Vector3d(-zoneSize-2, 0, -zoneSize-1));
    			case 2: this.moveToPosition(new Vector3d(-zoneSize-1, 0, -zoneSize-2));
    			case 3: this.moveToPosition(new Vector3d(-zoneSize-1, 0, -zoneSize-1));
    		}
    		
    		return;
    	}
    	
    	if(this.getCounter() > 0 && this.getTranslationalVelocity() > 0){
    		Coordinate oldPos = currentPosition;
    		switch(currentDirection){
    		// getvelocity/20 = 0.025
    		case 0: // north
    			currentPosition = new Coordinate(oldPos.getX()-0.025, oldPos.getY(), oldPos.getZ());
    			break;
    		case 1: // east
    			currentPosition = new Coordinate(oldPos.getX(), oldPos.getY(), oldPos.getZ()-0.025);
    			break;
    		case 2: // south
    			currentPosition = new Coordinate(oldPos.getX()+0.025, oldPos.getY(), oldPos.getZ());
    			break;
    		case 3: // west
    			currentPosition = new Coordinate(oldPos.getX(), oldPos.getY(), oldPos.getZ()+0.025);
    			break;
    		}
    	}
    	
    	
    	if(this.getCounter() > 0 && this.getCounter() == turnAgain){
    		turnRandomLeftRight();
    	}
    	
    	if( this.getCounter() > zonecheck )
    	{
        //System.out.printf("The current direction is: %d\n", currentDirection);
        switch(currentDirection){
        case 0:{ // north
        	
        	boolean outOfBounds = false;
        	switch(this.getZone().getID()){
        		case 0: outOfBounds = checkOutOfBoundsMaxX(currentPosition); break;
        		case 1: outOfBounds = checkOutOfBoundsMaxX(currentPosition); break;
        		case 2: outOfBounds = checkOutOfBoundsMinX(currentPosition); break;
        		case 3: outOfBounds = checkOutOfBoundsMinX(currentPosition); break;
        	}
        	if(outOfBounds){
        		turnAway();
                //return;
        	}
        	break;
        }
        case 1:{ // east

        	boolean outOfBounds = false;
        	switch(this.getZone().getID()){
        		case 0: outOfBounds = checkOutOfBoundsMinZ(currentPosition); break;
        		case 1: outOfBounds = checkOutOfBoundsMaxZ(currentPosition); break;
        		case 2: outOfBounds = checkOutOfBoundsMinZ(currentPosition); break;
        		case 3: outOfBounds = checkOutOfBoundsMaxZ(currentPosition); break;
        	}
        	if(outOfBounds){
        		turnAway();
                //return;
        	}
        	break;
        }
        case 2:{ // south

        	boolean outOfBounds = false;
        	switch(this.getZone().getID()){
        		case 0: outOfBounds = checkOutOfBoundsMinX(currentPosition); break;
        		case 1: outOfBounds = checkOutOfBoundsMinX(currentPosition); break;
        		case 2: outOfBounds = checkOutOfBoundsMaxX(currentPosition); break;
        		case 3: outOfBounds = checkOutOfBoundsMaxX(currentPosition); break;
        	}
        	
        	if(outOfBounds){
        		turnAway();
                //return;
        	}
        	break;
        }
        case 3:{ // west
        	
        	boolean outOfBounds = false;
        	switch(this.getZone().getID()){
        		case 0: outOfBounds = checkOutOfBoundsMaxZ(currentPosition); break;
        		case 1: outOfBounds = checkOutOfBoundsMinZ(currentPosition); break;
        		case 2: outOfBounds = checkOutOfBoundsMaxZ(currentPosition); break;
        		case 3: outOfBounds = checkOutOfBoundsMinZ(currentPosition); break;
        	}
        	
        	if(outOfBounds){
        		turnAway();
                //return;
        	}
        	break;
        }
        }
    	}
    	
    	if( this.getCounter() > proxcheck && sonar.getMeasurement(0) <= 0.2 ){
    		//System.out.printf("Counter before: %d\n", this.getCounter());
			Point3d loc = new Point3d();
            this.getCoords(loc);
            //System.out.printf("Obj Detected from: [X(%.1f) Y(%.1f) Z(%.1f)]\n", loc.getX(), loc.getY(), loc.getZ());
            // do something to store the fact
            double x = loc.getX();
            double z = loc.getZ();
            switch(currentDirection){
            	case 0: x-=1; break;
            	case 1: z-=1; break;
            	case 2: x+=1; break;
            	case 3: z+=1; break;
            }
            System.out.printf("[%d] Object detected at %.1f ~ %.1f --> becomes ", this.getCounter(), x, z);
            x = Math.round(x*2) / 2.0f;
            z = Math.round(z*2) / 2.0f;
            System.out.printf("object at: %.1f ~ %.1f\n", x, z);
    	
        	Coordinate zoneCoord = this.getZone().getZoneCoord(x, z);
        	if(zoneCoord != null){
        		if(!zoneCoord.isObstacle())
        			zoneCoord.setObstacle(true);
        	}
            
            turnRandomLeftRight();
            // do not instantly check again otherwise itll turn twice
            proxcheck = this.getCounter() + 10;
		}
    	
    	if(this.getCounter() % 20 == 0 ){
    		Point3d loc = new Point3d();
            this.getCoords(loc);            
    		//System.out.printf("(%s) GPS position: [%.1f - %.1f - %.1f]\n", this.getName(), loc.getX(), loc.getY(), loc.getZ());
    		//System.out.printf("(%s) New position: [%.1f - %.1f - %.1f]\n", this.getName(), currentPosition.getX(), currentPosition.getY(), currentPosition.getZ());
    	}
    	
    	// perform the following actions every 5 virtual seconds
    	if(this.getCounter() % 5 == 0) {
    		
    		/* camera rover stuff
    		Point3d loc = new Point3d();
            this.getCoords(loc);
            System.out.printf("Looking for x: %f\n", zoneGrid[grid_i][grid_j].getX());
            if(loc.getX() <= zoneGrid[grid_i][grid_j].getX())
            {
            	System.out.printf("Caught at: %f\n", loc.getX());
    			this.setTranslationalVelocity(0);
    			grid_i++;
    			running = false;
    			count = this.getCounter() + 100;
            	return;
            }
            */
    		
    		//System.out.printf("Proximity: %f\n", sonar.getMeasurement(0));
    		
	    	if(this.collisionDetected()) {
	    		this.setStatus("avoidObstacle");
	    	} else {
	    		this.setStatus("forward");
	    	}
	        
	    	
	    	if(this.getStatus() == "forward") {
	    		// the robot's speed is always 0.5 m/s
	            this.setTranslationalVelocity(0.5);  
	        } else {
	        	// collision detected -> do sth
	        	Point3d loc = new Point3d();
	            this.getCoords(loc);
	            System.out.printf("CollDet: [X(%.1f) Y(%.1f) Z(%.1f)]\n", loc.getX(), loc.getY(), loc.getZ());
	        }
    	}
    	
    }
    
    void turnRandomLeftRight(){
		this.setStatus("turning");
		Random r = new Random();
    	int rand = r.nextInt(2);
    	switch(rand){
    	case 0:{
    		rotateY((Math.PI)/2); currentDirection = currentDirection - 1; if(currentDirection<0)currentDirection=3;
    		break;
    	}
    	case 1:{
    		rotateY(-(Math.PI)/2); currentDirection = (currentDirection + 1) % 4;
    		break;
    	}
    	}
    	this.setStatus("forward");
    }
    
    boolean checkOutOfBoundsMaxX(Coordinate pos){
    	if(Math.abs(pos.getX()) > Math.abs(zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getX())){
    		return true;
    	}
    	return false;
    }
    boolean checkOutOfBoundsMinX(Coordinate pos){
    	if(Math.abs(pos.getX()) < Math.abs(zoneGrid[0][0].getX())){
    		return true;
    	}
    	return false;
    }
    boolean checkOutOfBoundsMaxZ(Coordinate pos){
    	if(Math.abs(pos.getZ()) > Math.abs(zoneGrid[zoneGrid.length-1][zoneGrid.length-1].getZ())){
    		return true;
    	}
    	return false;
    }
    boolean checkOutOfBoundsMinZ(Coordinate pos){
    	if(Math.abs(pos.getZ()) < Math.abs(zoneGrid[0][0].getZ())){
    		return true;
    	}
    	return false;
    }

    void turnAway(){
		this.setStatus("turning");
		this.setTranslationalVelocity(0);
		rotateY(-(Math.PI)); 
		currentDirection = (currentDirection + 2) % 4;
		turnAgain = this.getCounter() + 39;
        zonecheck = this.getCounter() + 10;
        this.setStatus("forward");
    }
    
	@Override
	public void update() {
		
	}
};
